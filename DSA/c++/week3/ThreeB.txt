#include <iostream>
#include <cstdio>
#include <iomanip>
#include <algorithm>
using namespace std;
const char l = '\n';
class Node
{
public:
	int emp_id, emp_mobileno;
	double emp_sal;
	string emp_dept;
	Node *next;
	Node *prev;
	Node(int emp_id = 0, int emp_mobileno = 0, double emp_sal = 0.0, string emp_dept = "", Node *next = NULL, Node *prev = NULL)
	{
		this->emp_id = emp_id;
		this->emp_mobileno = emp_mobileno;
		this->emp_sal = emp_sal;
		this->emp_dept = emp_dept;
		this->next = next;
		this->prev = prev;
	}
	~Node()
	{
		delete this;
	}
};
class LinkedList
{
public:
	Node *head = NULL;
	Node *first = NULL;
	Node *searchNode(int id)
	{
		Node *temp = NULL;
		Node *ptr = head;
		while (ptr != NULL)
		{
			if (ptr->emp_id == id)
			{
				temp = ptr;
				break;
			}
			ptr = ptr->next;
		}
		return temp;
	}

	int count()
	{
		int n = 0;
		Node *temp = head;
		while (temp != NULL)
		{
			temp = temp->next;
			n++;
		}
		return n;
	}

	void add()
	{ //Create a DLL of N Employees Data by using end insertion.
		int n, i = 1;
		cout << l << "Enter number of employees you want to add: ";
		cin >> n;
		Node *temp;
		if (head == NULL)
		{
			first = new Node();
			printf("Enter employee - %d id : ", i);
			cin >> first->emp_id;
			fflush(stdin);
			printf("Enter employee - %d mobile no : ", i);
			cin >> first->emp_mobileno;
			fflush(stdin);
			printf("Enter employee - %d salary: ", i);
			cin >> first->emp_sal;
			fflush(stdin);
			printf("Enter employee - %d dept : ", i);
			getline(cin, first->emp_dept);
			fflush(stdin);
			i++;
			head = first;
			temp = head;
			cout << l;
		}
		else
		{
			temp = this->first;
			while (temp->next != NULL)
				temp = temp->next;
		}
		Node *cur = temp;
		while (i <= n)
		{
			Node *value = new Node();
			printf("Enter employee - %d id : ", i);
			cin >> value->emp_id;
			fflush(stdin);
			if (searchNode(value->emp_id) != NULL)
			{
				cout << l << "Employee already exists in DLL" << l;
				delete value;
				i++;
			}
			else
			{
				printf("Enter employee - %d mobile no : ", i);
				cin >> value->emp_mobileno;
				fflush(stdin);
				printf("Enter employee - %d salary: ", i);
				cin >> value->emp_sal;
				fflush(stdin);
				printf("Enter employee - %d dept : ", i);
				getline(cin, value->emp_dept);
				fflush(stdin);
				temp->next = value;
				cur = temp;
				temp = temp->next;
				temp->prev = cur;
				i++;
				cout << l;
			}
		}
		cout << l << "Successfully updated the DLL" << l;
	}
	void displayDLL()
	{
		Node *temp = head;
		printf("\n%-10s%-15s%-13s%s\n", "Emp id", "Emp_mobileno", "Emp sal", "Emp dept");
		while (temp != NULL)
		{
			printf("%-10d%-15d%-13.2f", temp->emp_id, temp->emp_mobileno, temp->emp_sal);
			cout << temp->emp_dept << l;
			temp = temp->next;
		}
		cout << l;
	}
	void insertAtEnd()
	{
		Node *temp = this->head;
		while (temp->next != NULL)
			temp = temp->next;
		Node *cur = temp;
		Node *value = new Node();
		printf("Enter employee id : ");
		cin >> value->emp_id;
		fflush(stdin);
		if (searchNode(value->emp_id) != NULL)
		{
			cout << l << "Employee already exists in DLL" << l;
			delete value;
		}
		else
		{
			printf("Enter employee mobile no : ");
			cin >> value->emp_mobileno;
			fflush(stdin);
			printf("Enter employee salary : ");
			cin >> value->emp_sal;
			fflush(stdin);
			printf("Enter employee dept : ");
			getline(cin, value->emp_dept);
			fflush(stdin);
			temp->next = value;
			cur = temp;
			temp = temp->next;
			temp->prev = cur;
			cout << l << "Successfully updated the DLL" << l;
		}
	}
	void deleteaAtEnd()
	{
		Node *temp = this->head;
		while (temp->next != NULL)
		{
			temp = temp->next;
		}
		if (temp->prev != NULL)
		{
			temp = temp->prev;
			temp->next = NULL;
			delete temp->next;
		}
		else
		{
			delete this->head;
			this->head = NULL;
		}
		cout << l << "Deleted successfully" << l;
	}
	void deleteAtFront()
	{
		if (head->next != NULL)
		{
			this->head = this->head->next;
			delete this->head->prev;
		}
		else
		{
			this->head = NULL;
			delete this->head;
		}
		cout << l << "Deleted successfully" << l;
	}
	void insertAtFront()
	{
		Node *value = new Node();
		printf("Enter employee id : ");
		cin >> value->emp_id;
		fflush(stdin);
		if (searchNode(value->emp_id) != NULL)
		{
			cout << l << "Employee already exists in DLL" << l;
			delete value;
		}
		else
		{
			printf("Enter employee mobile no : ");
			cin >> value->emp_mobileno;
			fflush(stdin);
			printf("Enter employee salary : ");
			cin >> value->emp_sal;
			fflush(stdin);
			printf("Enter employee dept : ");
			getline(cin, value->emp_dept);
			fflush(stdin);
			this->first->prev = value;
			Node *cur = this->first;
			this->first = this->first->prev;
			this->first->next = cur;
			this->head = this->first;
			cout << l << "Successfully updated the DLL" << l;
		}
	}
	void insert()
	{
		Node *value = new Node();
		printf("Enter employee id at which you want to insert : ");
		cin >> value->emp_id;
		fflush(stdin);
		Node *temp = searchNode(value->emp_id);
		if (temp == NULL)
		{
			cout << l << "Employee id entered doesn't exist in DLL" << l;
			delete value;
		}
		else
		{
			printf("Enter employee id you want to insert : ");
			cin >> value->emp_id;
			if (searchNode(value->emp_id) != NULL)
			{
				cout << l << "Employee already present in DLL" << l;
				delete value;
			}
			else
			{
				printf("Enter employee mobile no : ");
				cin >> value->emp_mobileno;
				fflush(stdin);
				printf("Enter employee salary: ");
				cin >> value->emp_sal;
				fflush(stdin);
				printf("Enter employee dept : ");
				getline(cin, value->emp_dept);
				fflush(stdin);
				if (temp->next != NULL)
				{
					value->next = temp->next;
					value->prev = temp;
					temp->next->prev = value;
					temp->next = value;
				}
				else
				{
					temp->next = value;
					value->prev = temp;
				}
			}
		}
		cout << l << "Successfully updated the DLL" << l;
	}
	void delet()
	{
		int emp_id;
		printf("Enter employee id you want to delete : ");
		cin >> emp_id;
		fflush(stdin);
		Node *temp = searchNode(emp_id);
		if (temp == NULL)
		{
			cout << l << "Employee id entered doesn't exist in DLL" << l;
		}
		else
		{
			if (this->head->emp_id == emp_id)
			{
				if (count() != 1)
				{
					this->head = this->head->next;
					this->head->prev = NULL;
					delete this->head->prev;
				}
				else
				{
					this->head = NULL;
					delete this->head;
				}
			}
			else
			{
				if (temp->next == NULL)
				{
					temp = temp->prev;
					delete temp->next;
					temp->next = NULL;
				}
				else
				{
					temp->prev->next = temp->next;
					temp->next->prev = temp->prev;
					delete temp;
					temp = NULL;
				}
			}
			cout << l << "Deleted successfully" << l;
		}
	}
	void todo(int option)
	{
		switch (option)
		{
		case 1:
			add();
			break;
		case 2:
			cout << l << "Total members in DLL is " << count() << l;
			break;
		case 3:
			if (count() == 0)
				cout << l << "There are no employees in DLL" << l;
			else
				displayDLL();
			break;
		case 4:
			if (count() == 0)
				cout << l << "There are no employees in DLL" << l;
			else
				insertAtFront();
			break;
		case 5:
			if (count() == 0)
				cout << l << "There are no employees in DLL" << l;
			else
				insertAtEnd();
			break;
		case 6:
			if (count() == 0)
				cout << l << "There are no employees in DLL" << l;
			else
				insert();
			break;
		case 7:
			if (count() == 0)
				cout << l << "There are no employees in DLL to delete" << l;
			else
				deleteAtFront();
			break;
		case 8:
			if (count() == 0)
				cout << l << "There are no employees in DLL to delete" << l;
			else
				deleteaAtEnd();
			break;
		case 9:
			if (count() == 0)
				cout << l << "There are no employees in DLL to delete" << l;
			else
				delet();
			break;
		case 10:
			cout << l << l << "------------------------Program ends------------------------" << l << l;
			break;
		default:
			cout << l << "Enter a valid option !!" << l;
		}
	}
	void operations()
	{
		int option;
		do
		{
			cout << ("\n1-> Add members\n"
					 "2->  Count of nodes in DLL\n"
					 "3->  Display Employee data in DLL\n"
					 "4->  Insert Employee at Front of the DLL\n"
					 "5->  Insert Employee at End of the DLL\n"
					 "6->  Insert Employee at a specific position in DLL\n"
					 "7->  Delete Employee at Front of the DLL\n"
					 "8->  Delete Employee at End of the DLL\n"
					 "9->  Delete Employee at a specific position in DLL\n"
					 "10-> Exit\n");
			cout << ("\nEnter your option: ");
			cin >> option;
			fflush(stdin);
			todo(option);
		} while (option != 10);
	}
};
int main()
{
	cout << "------------------------Program starts------------------------" << l << l;
	LinkedList list;
	list.operations();
	return 0;
}
